/* eslint-disable @typescript-eslint/no-explicit-any */
import { createClient } from '@supabase/supabase-js';
import type { NodeType, EdgeType } from '../utils/umlConstants';

// Configuraci√≥n de Supabase
const supabaseUrl = 'https://bwduexqzhjolwfxupvco.supabase.co';
const supabaseKey =
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ3ZHVleHF6aGpvbHdmeHVwdmNvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjA5ODc3NzAsImV4cCI6MjA3NjU2Mzc3MH0.WQiWHEYBzsT0LAa5N3quDDiZlYzfOVz7lY86ZF02RjI';
const supabase = createClient(supabaseUrl, supabaseKey);

// Token OpenAI hardcodeado
const OPENAI_TOKEN =
  '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';

// Tipos para el an√°lisis OpenAI
type OpenAIClass = {
  name: string;
  attributes: Array<{
    name: string;
    type: string;
    visibility: 'public' | 'private' | 'protected';
  }>;
  methods: Array<{
    name: string;
    returnType: string;
    parameters: Array<any>;
    visibility: 'public' | 'private' | 'protected';
  }>;
};

type OpenAIRelationship = {
  type: 'association' | 'inheritance' | 'composition' | 'aggregation';
  source: string;
  target: string;
  multiplicity?: string;
};

type OpenAIResponse = {
  classes: OpenAIClass[];
  relationships: OpenAIRelationship[];
};

type AnalysisResult = {
  success: boolean;
  nodes?: NodeType[];
  edges?: EdgeType[];
  error?: string;
  cost?: number;
};

/**
 * Convierte la respuesta de OpenAI al formato esperado por umlConstants
 */
function convertOpenAIToUMLConstants(openaiData: OpenAIResponse): {
  nodes: NodeType[];
  edges: EdgeType[];
} {
  const nodes: NodeType[] = [];
  const edges: EdgeType[] = [];

  console.log('ÔøΩ Creando nodos...');

  // Crear nodos
  const startX = 100;
  const startY = 100;
  const spacingX = 300;
  const spacingY = 400;
  const cols = 3;

  // Generar timestamp √∫nico para evitar colisiones de IDs
  const timestamp = Date.now();
  let nodeCounter = 1;
  let edgeCounter = 1;

  openaiData.classes.forEach((cls, index) => {
    const row = Math.floor(index / cols);
    const col = index % cols;

    const node: NodeType = {
      id: `imported_${timestamp}_n${nodeCounter++}`,
      label: cls.name,
      x: startX + col * spacingX,
      y: startY + row * spacingY,
      // Filtrar atributos 'id' ya que se asumen impl√≠citamente
      attributes: cls.attributes
        .filter(attr => attr.name.toLowerCase() !== 'id')
        .map(attr => ({
          name: attr.name,
          scope: (attr.visibility as 'public' | 'private' | 'protected') || 'private', // Default a 'private' si no se especifica
          datatype: mapOpenAITypeToUMLType(attr.type || 'String'), // Default a 'String' si no se especifica
        })),
    };

    // Calcular altura basada en atributos
    const ATTR_HEIGHT = 28;
    const NODE_HEIGHT = 120;
    node.height = NODE_HEIGHT + (node.attributes?.length || 0) * ATTR_HEIGHT;

    nodes.push(node);
    console.log(`üìù Creado nodo: ${cls.name} (ID: ${node.id})`);
  });

  // Crear un mapa de nombres de clases a IDs
  const classNameToId = new Map<string, string>();
  nodes.forEach(node => {
    classNameToId.set(node.label, node.id);
  });

  // FILTRAR RELACIONES DUPLICADAS BIDIRECCIONALES Y CORREGIR DIRECCIONALIDAD
  console.log('üîß Filtrando relaciones duplicadas y corrigiendo direccionalidad...');
  const uniqueRelationships: any[] = [];
  const seenRelations = new Set<string>();

  for (const rel of openaiData.relationships) {
    // Aplicar correcci√≥n sem√°ntica de direccionalidad
    const correctedRel = correctRelationshipDirection(rel);

    // Crear clave normalizada para detectar duplicados bidireccionales
    const key1 = `${correctedRel.source}-${correctedRel.target}`;
    const key2 = `${correctedRel.target}-${correctedRel.source}`;

    // Si no hemos visto ninguna de las dos direcciones, agregar la relaci√≥n
    if (!seenRelations.has(key1) && !seenRelations.has(key2)) {
      uniqueRelationships.push(correctedRel);
      seenRelations.add(key1);
    }
  }

  console.log(
    `üìä Relaciones originales: ${openaiData.relationships.length}, √∫nicas: ${uniqueRelationships.length}`
  );

  // ALGORITMO DE INFERENCIA: Detectar relaciones faltantes para tablas intermedias
  console.log('üîß Verificando relaciones faltantes para tablas intermedias...');

  // Buscar tablas que sigan patrones de entidades intermedias
  const intermediateEntities = openaiData.classes.filter(cls => {
    const name = cls.name.toLowerCase();
    return (
      name.startsWith('detalle') ||
      name.includes('intermedia') ||
      name.includes('relacion') ||
      name.includes('asociacion') ||
      name.includes('inscripcion') ||
      name.includes('union') ||
      name.includes('conexion')
    );
  });

  intermediateEntities.forEach(intermediateEntity => {
    const entityName = intermediateEntity.name;
    console.log(`üîç Verificando entidad intermedia: ${entityName}...`);

    // Buscar todas las conexiones a esta entidad
    const connectionsToEntity = uniqueRelationships.filter(
      rel => rel.target === entityName || rel.source === entityName
    );

    console.log(`   Conexiones encontradas: ${connectionsToEntity.length}`);
    connectionsToEntity.forEach(conn => {
      console.log(`      ${conn.source} ‚Üí ${conn.target}`);
    });

    // Si tiene solo 1 conexi√≥n, intentar inferir la segunda
    if (connectionsToEntity.length === 1) {
      const existingConnection = connectionsToEntity[0];
      const connectedEntity =
        existingConnection.source === entityName
          ? existingConnection.target
          : existingConnection.source;

      console.log(`   ‚ö†Ô∏è ${entityName} solo tiene 1 conexi√≥n con ${connectedEntity}`);

      // INFERENCIA UNIVERSAL: Buscar entidades principales comunes
      let inferredEntity = null;

      // Buscar entidades que podr√≠an ser la segunda conexi√≥n
      const commonEntityPatterns = [
        'producto',
        'item',
        'articulo',
        'elemento',
        'objeto',
        'usuario',
        'cliente',
        'persona',
        'agente',
        'servicio',
        'tarea',
        'actividad',
        'operacion',
        'documento',
        'archivo',
        'registro',
        'entrada',
        'categoria',
        'tipo',
        'clase',
        'grupo',
      ];

      // Buscar por patrones comunes en las entidades disponibles
      for (const pattern of commonEntityPatterns) {
        const candidate = openaiData.classes.find(
          cls =>
            cls.name.toLowerCase().includes(pattern) &&
            cls.name !== entityName &&
            cls.name !== connectedEntity
        );

        if (candidate) {
          inferredEntity = candidate.name;
          break;
        }
      }

      // Si no se encontr√≥ por patrones, buscar la entidad m√°s mencionada
      if (!inferredEntity) {
        const entityFrequency = new Map<string, number>();
        openaiData.classes.forEach(cls => {
          if (cls.name !== entityName && cls.name !== connectedEntity) {
            entityFrequency.set(cls.name, 0);
          }
        });

        // Contar referencias en otras relaciones
        uniqueRelationships.forEach(rel => {
          if (entityFrequency.has(rel.source)) {
            entityFrequency.set(rel.source, entityFrequency.get(rel.source)! + 1);
          }
          if (entityFrequency.has(rel.target)) {
            entityFrequency.set(rel.target, entityFrequency.get(rel.target)! + 1);
          }
        });

        // Seleccionar la entidad m√°s referenciada
        let maxCount = 0;
        for (const [entity, count] of entityFrequency.entries()) {
          if (count > maxCount) {
            maxCount = count;
            inferredEntity = entity;
          }
        }
      }

      if (inferredEntity && openaiData.classes.some(cls => cls.name === inferredEntity)) {
        // Verificar que no existe ya esta relaci√≥n
        const relationExists = uniqueRelationships.some(
          rel =>
            (rel.source === inferredEntity && rel.target === entityName) ||
            (rel.source === entityName && rel.target === inferredEntity)
        );

        if (!relationExists) {
          console.log(
            `   ‚úÖ Agregando relaci√≥n inferida: ${inferredEntity} ‚Üí ${entityName} (inferencia universal)`
          );
          uniqueRelationships.push({
            type: 'association',
            source: inferredEntity,
            target: entityName,
            multiplicity: '1..*',
          });
        }
      } else {
        console.log(`   ‚ö†Ô∏è No se pudo inferir segunda relaci√≥n para ${entityName}`);
      }
    }
  });

  console.log(`üìä Relaciones despu√©s de inferencia: ${uniqueRelationships.length}`);

  // Identificar tablas intermedias/asociativas de manera universal
  const processedRelationships = new Set<string>();

  console.log('üîç Identificando patrones de relaciones M:N...');

  // ALGORITMO ROBUSTO: Detectar tablas asociativas de manera universal
  nodes.forEach(candidateNode => {
    const candidateName = candidateNode.label;

    // PASO 1: Buscar todas las relaciones conectadas a este candidato (usando relaciones √∫nicas)
    const incomingRels = uniqueRelationships.filter(rel => rel.target === candidateName);
    const outgoingRels = uniqueRelationships.filter(rel => rel.source === candidateName);
    const allConnectedRels = [...incomingRels, ...outgoingRels];

    console.log(`ÔøΩ Analizando candidato: ${candidateName}`);
    console.log(
      `   Relaciones conectadas: ${allConnectedRels.length} (${incomingRels.length} entrantes, ${outgoingRels.length} salientes)`
    );

    // PASO 2: CRITERIO PRINCIPAL - Nombre t√≠pico de tabla intermedia
    const isDetalleEntity = candidateName.toLowerCase().startsWith('detalle');
    const isIntermediaEntity = [
      'intermedia',
      'relacion',
      'inscripcion',
      'asociacion',
      'union',
    ].some(word => candidateName.toLowerCase().includes(word));

    // PASO 3: Solo procesar si tiene nombre t√≠pico de tabla intermedia
    if (!isDetalleEntity && !isIntermediaEntity) {
      console.log(`   ‚ùå No es tabla intermedia: "${candidateName}" no tiene patr√≥n t√≠pico`);
      return; // Saltar este candidato
    }

    console.log(`   ‚úÖ Candidato v√°lido: "${candidateName}" tiene patr√≥n de tabla intermedia`);

    // PASO 4: Identificar entidades √∫nicas conectadas (no n√∫mero de relaciones)
    const connectedEntities = new Set<string>();
    allConnectedRels.forEach(rel => {
      if (rel.source === candidateName) {
        connectedEntities.add(rel.target);
      } else {
        connectedEntities.add(rel.source);
      }
    });

    const entityArray = Array.from(connectedEntities);
    console.log(
      `   üéØ Entidades √∫nicas conectadas: ${entityArray.length} (${entityArray.join(', ')})`
    );

    // PASO 5: Debe conectar exactamente 2 entidades principales
    if (entityArray.length !== 2) {
      console.log(
        `   ‚ùå Rechazado: conecta ${entityArray.length} entidades √∫nicas (debe ser exactamente 2)`
      );
      return;
    }

    const [entityA, entityB] = entityArray;
    console.log(`   üéØ Entidades conectadas: ${entityA} ‚Üî ${entityB}`);

    // PASO 6: Verificar que las entidades conectadas NO sean tablas intermedias
    const entityAIsIntermediate =
      entityA.toLowerCase().startsWith('detalle') ||
      ['intermedia', 'relacion', 'inscripcion'].some(word => entityA.toLowerCase().includes(word));
    const entityBIsIntermediate =
      entityB.toLowerCase().startsWith('detalle') ||
      ['intermedia', 'relacion', 'inscripcion'].some(word => entityB.toLowerCase().includes(word));

    if (entityAIsIntermediate || entityBIsIntermediate) {
      console.log(`   ‚ùå Rechazado: una de las entidades conectadas tambi√©n es intermedia`);
      console.log(`      ${entityA}: ${entityAIsIntermediate ? 'intermedia' : 'principal'}`);
      console.log(`      ${entityB}: ${entityBIsIntermediate ? 'intermedia' : 'principal'}`);
      return;
    }

    // PASO 7: DETECTADA TABLA ASOCIATIVA V√ÅLIDA
    const entityIdA = classNameToId.get(entityA);
    const entityIdB = classNameToId.get(entityB);

    if (!entityIdA || !entityIdB) {
      console.log(
        `   ‚ùå Error: IDs no encontrados para ${entityA} (${entityIdA}) o ${entityB} (${entityIdB})`
      );
      return;
    }

    console.log(`üéâ TABLA ASOCIATIVA DETECTADA: ${candidateName}`);
    console.log(`   Conecta: ${entityA} ‚Üî ${entityB}`);

    // PASO 8: Configurar tabla asociativa (patr√≥n exacto del sistema manual)
    candidateNode.asociativa = true;
    candidateNode.relaciona = [entityIdA, entityIdB];

    // PASO 9: Crear las 2 relaciones M:N (EntidadA ‚Üí Tabla, EntidadB ‚Üí Tabla)
    const edgeA = {
      id: `imported_${timestamp}_e${edgeCounter++}`,
      source: entityIdA,
      target: candidateNode.id,
      tipo: 'asociacion' as const,
      multiplicidadOrigen: '1' as const,
      multiplicidadDestino: '*' as const,
    };
    edges.push(edgeA);

    const edgeB = {
      id: `imported_${timestamp}_e${edgeCounter++}`,
      source: entityIdB,
      target: candidateNode.id,
      tipo: 'asociacion' as const,
      multiplicidadOrigen: '1' as const,
      multiplicidadDestino: '*' as const,
    };
    edges.push(edgeB);

    // PASO 10: Marcar relaciones como procesadas
    allConnectedRels.forEach(rel => {
      processedRelationships.add(`${rel.source}-${rel.target}`);
      processedRelationships.add(`${rel.target}-${rel.source}`);
    });

    console.log(`   ‚úÖ Configuraci√≥n completada:`);
    console.log(`      - Tabla: ${candidateName} (asociativa: true)`);
    console.log(`      - Relaciona: [${entityA}, ${entityB}]`);
    console.log(`      - Edge A: ${entityA} ‚Üí ${candidateName} (${edgeA.id})`);
    console.log(`      - Edge B: ${entityB} ‚Üí ${candidateName} (${edgeB.id})`);
    console.log(`      - Total edges: ${edges.length}`);
  });

  console.log('üîó Procesando relaciones directas...');
  console.log(`üìã Total relaciones √∫nicas para procesar: ${uniqueRelationships.length}`);

  // Crear mapa de entidades conectadas v√≠a M:N para evitar relaciones directas duplicadas
  const mnConnectedEntities = new Set<string>();
  nodes
    .filter(n => n.asociativa && n.relaciona)
    .forEach(tableNode => {
      const [idA, idB] = tableNode.relaciona!;
      const nameA = nodes.find(n => n.id === idA)?.label;
      const nameB = nodes.find(n => n.id === idB)?.label;
      if (nameA && nameB) {
        mnConnectedEntities.add(`${nameA}-${nameB}`);
        mnConnectedEntities.add(`${nameB}-${nameA}`); // Ambas direcciones
        console.log(`üìù M:N registrado: ${nameA} ‚Üî ${nameB} (evitar relaciones directas)`);
      }
    });

  // Procesar relaciones directas (no M:N)
  uniqueRelationships.forEach((rel, idx) => {
    const relKey = `${rel.source}-${rel.target}`;

    console.log(
      `üîó Relaci√≥n ${idx + 1}: ${rel.source} ‚Üí ${rel.target} (${rel.type}) mult: "${rel.multiplicity || 'sin mult'}"`
    );

    if (processedRelationships.has(relKey)) {
      console.log(`  ‚è≠Ô∏è Saltando - ya procesada como M:N: ${relKey}`);
      return;
    }

    // NUEVA VERIFICACI√ìN: Evitar relaciones directas entre entidades conectadas v√≠a M:N
    if (mnConnectedEntities.has(`${rel.source}-${rel.target}`)) {
      console.log(`  ‚è≠Ô∏è Saltando - existe relaci√≥n M:N: ${rel.source} ‚Üî ${rel.target}`);
      return;
    }

    const sourceId = classNameToId.get(rel.source);
    const targetId = classNameToId.get(rel.target);

    if (!sourceId || !targetId) {
      console.log(
        `  ‚ùå Error: No se encontraron IDs para ${rel.source} (${sourceId}) ‚Üí ${rel.target} (${targetId})`
      );
      return;
    }

    // Parsear multiplicidad
    const { origen, destino } = parseMultiplicity(rel.multiplicity);

    const edge: EdgeType = {
      id: `imported_${timestamp}_e${edgeCounter++}`,
      source: sourceId,
      target: targetId,
      tipo: mapOpenAIRelationType(rel.type),
      multiplicidadOrigen: origen,
      multiplicidadDestino: destino,
    };

    edges.push(edge);
    console.log(
      `  ‚úÖ Relaci√≥n directa agregada: ${rel.source} ‚Üí ${rel.target} (${edge.tipo}) [${origen}:${destino}]`
    );
  });

  console.log(`‚úÖ Conversi√≥n completada: ${nodes.length} nodos, ${edges.length} relaciones`);

  // Resumen de detecci√≥n M:N
  const associativeNodes = nodes.filter(n => n.asociativa);
  console.log(`üìä RESUMEN FINAL:`);
  console.log(`   - Entidades principales: ${nodes.filter(n => !n.asociativa).length}`);
  console.log(`   - Tablas asociativas (M:N): ${associativeNodes.length}`);
  console.log(`   - Relaciones totales: ${edges.length}`);

  if (associativeNodes.length > 0) {
    console.log(`üîó RELACIONES M:N DETECTADAS:`);
    associativeNodes.forEach(node => {
      const [id1, id2] = node.relaciona || [];
      const name1 = nodes.find(n => n.id === id1)?.label;
      const name2 = nodes.find(n => n.id === id2)?.label;
      console.log(`   - ${name1} ‚Üî ${name2} v√≠a ${node.label}`);
    });
  }

  console.log('=======================================');

  return { nodes, edges };
}

/**
 * Mapea tipos de OpenAI a tipos UML
 */
function mapOpenAITypeToUMLType(
  openaiType: string
): 'Integer' | 'Float' | 'Boolean' | 'Date' | 'String' {
  const type = openaiType.toLowerCase();

  if (type.includes('int') || type.includes('number') || type === 'long') {
    return 'Integer';
  }
  if (type.includes('float') || type.includes('double') || type.includes('decimal')) {
    return 'Float';
  }
  if (type.includes('bool')) {
    return 'Boolean';
  }
  if (type.includes('date') || type.includes('time')) {
    return 'Date';
  }

  return 'String'; // Por defecto
}

/**
 * Mapea tipos de relaci√≥n de OpenAI a tipos UML
 */
function mapOpenAIRelationType(
  openaiType: string
): 'asociacion' | 'agregacion' | 'composicion' | 'herencia' | 'dependencia' {
  const type = openaiType.toLowerCase().trim();

  console.log(`üîÑ Mapeando tipo de relaci√≥n: "${openaiType}" ‚Üí "${type}"`);

  switch (type) {
    case 'inheritance':
    case 'extends':
    case 'inherits':
    case 'generalization':
    case 'is-a':
      console.log(`  ‚Üí Detectada HERENCIA`);
      return 'herencia';

    case 'composition':
    case 'composite':
    case 'part-of':
    case 'contains':
      console.log(`  ‚Üí Detectada COMPOSICI√ìN`);
      return 'composicion';

    case 'aggregation':
    case 'aggregate':
    case 'has-a':
    case 'whole-part':
      console.log(`  ‚Üí Detectada AGREGACI√ìN`);
      return 'agregacion';

    case 'dependency':
    case 'depends':
    case 'uses':
      console.log(`  ‚Üí Detectada DEPENDENCIA`);
      return 'dependencia';

    case 'association':
    case 'associates':
    case 'relates':
    default:
      console.log(`  ‚Üí Detectada ASOCIACI√ìN (por defecto)`);
      return 'asociacion';
  }
}

/**
 * Parsea multiplicidad de formato OpenAI a formato UML interno
 */
function parseMultiplicity(multiplicity?: string): { origen: '1' | '*'; destino: '1' | '*' } {
  if (!multiplicity) {
    return { origen: '1', destino: '1' };
  }

  const mult = multiplicity.toLowerCase().trim();

  console.log(`üî¢ Parseando multiplicidad: "${multiplicity}" ‚Üí "${mult}"`);

  // Detectar multiplicidades m√∫ltiples (* o many)
  if (mult === '*' || mult === '0..*' || mult.includes('many') || mult.includes('n')) {
    console.log(`  ‚Üí Detectada multiplicidad m√∫ltiple: 1‚Üí*`);
    return { origen: '1', destino: '*' };
  }

  // Casos espec√≠ficos 1:*
  if (mult === '1..*' || mult === 'one-to-many') {
    console.log(`  ‚Üí Detectada relaci√≥n 1:*`);
    return { origen: '1', destino: '*' };
  }

  // Casos espec√≠ficos 1:1
  if (mult === '1' || mult === '1..1' || mult === 'one-to-one') {
    console.log(`  ‚Üí Detectada relaci√≥n 1:1`);
    return { origen: '1', destino: '1' };
  }

  // Por defecto uno a uno
  console.log(`  ‚Üí Por defecto: 1:1`);
  return { origen: '1', destino: '1' };
}

/**
 * Corrige la direccionalidad de relaciones bas√°ndose en patrones sem√°nticos universales
 */
function correctRelationshipDirection(rel: OpenAIRelationship): OpenAIRelationship {
  const source = rel.source.toLowerCase();
  const target = rel.target.toLowerCase();

  console.log(`üîç Evaluando relaci√≥n: ${rel.source} ‚Üí ${rel.target}`);

  // PATRONES UNIVERSALES DE CORRECCI√ìN SEM√ÅNTICA (evaluados individualmente)
  const universalPatterns = [
    // Patr√≥n 1: Entidad clasificadora ‚Üí Entidad clasificada
    {
      name: 'Clasificaci√≥n',
      sourcePattern: /^(categor[i√≠]a|tipo|clase|clasificaci[o√≥]n|grupo|familia)$/,
      targetPattern: /^(producto|item|elemento|articulo|objeto)$/,
      needsCorrection: false, // Ya est√° en direcci√≥n correcta
      reason: 'Una entidad clasificadora contiene m√∫ltiples elementos clasificados',
    },

    // Patr√≥n 2: Entidad principal ‚Üí Entidad de detalle
    {
      name: 'Principal-Detalle',
      sourcePattern: /^(venta|compra|factura|pedido|orden|documento)$/,
      targetPattern: /^detalle.+$/,
      needsCorrection: false,
      reason: 'Una entidad principal contiene m√∫ltiples detalles',
    },

    // Patr√≥n 3: Actor ‚Üí Acci√≥n (entidades que representan acciones/transacciones)
    {
      name: 'Actor-Acci√≥n',
      sourcePattern: /^(cliente|usuario|persona|empleado|proveedor|vendedor|comprador)$/,
      targetPattern: /^(venta|compra|pedido|orden|transacci[o√≥]n|operaci[o√≥]n|solicitud)$/,
      needsCorrection: false,
      reason: 'Un actor realiza m√∫ltiples acciones',
    },

    // Patr√≥n 4: Producto ‚Üí Entidad de detalle (para M:N)
    {
      name: 'Producto-Detalle',
      sourcePattern: /^(producto|item|articulo|elemento|servicio)$/,
      targetPattern: /^detalle.+$/,
      needsCorrection: false,
      reason: 'Un producto aparece en m√∫ltiples detalles',
    },
  ];

  // Evaluar cada patr√≥n individualmente
  for (const pattern of universalPatterns) {
    const sourceMatches = pattern.sourcePattern.test(source);
    const targetMatches = pattern.targetPattern.test(target);
    const reverseSourceMatches = pattern.sourcePattern.test(target);
    const reverseTargetMatches = pattern.targetPattern.test(source);

    if (sourceMatches && targetMatches) {
      // Direcci√≥n correcta seg√∫n el patr√≥n
      console.log(`   ‚úÖ Patr√≥n ${pattern.name}: direcci√≥n correcta (${pattern.reason})`);
      return rel;
    } else if (reverseSourceMatches && reverseTargetMatches) {
      // Direcci√≥n invertida - corregir
      console.log(`   üîÑ Patr√≥n ${pattern.name}: invirtiendo direcci√≥n (${pattern.reason})`);
      return {
        ...rel,
        source: rel.target,
        target: rel.source,
      };
    }
  }

  // AN√ÅLISIS HEUR√çSTICO ADICIONAL para casos no cubiertos por patrones espec√≠ficos

  // Heur√≠stica 1: Nombres m√°s generales ‚Üí Nombres m√°s espec√≠ficos
  if (source.length < target.length && target.includes(source)) {
    console.log(
      `   üîÑ Heur√≠stica especificidad: ${rel.source} ‚Üí ${rel.target} INVERTIDA (entidad general ‚Üí espec√≠fica)`
    );
    return {
      ...rel,
      source: rel.target,
      target: rel.source,
    };
  }

  // Heur√≠stica 2: Entidades singulares ‚Üí Entidades plurales (si detectables)
  const sourceIsPlural = source.endsWith('s') || source.endsWith('es');
  const targetIsPlural = target.endsWith('s') || target.endsWith('es');

  if (!sourceIsPlural && targetIsPlural) {
    console.log(
      `   üîÑ Heur√≠stica cardinalidad: ${rel.source} ‚Üí ${rel.target} INVERTIDA (singular ‚Üí plural)`
    );
    return {
      ...rel,
      source: rel.target,
      target: rel.source,
    };
  }

  // Si no hay correcci√≥n aplicable, mantener como est√°
  console.log(`   ‚û°Ô∏è Sin correcci√≥n aplicable: manteniendo ${rel.source} ‚Üí ${rel.target}`);
  return rel;
}

/**
 * Sube una imagen a Supabase y retorna la URL p√∫blica
 */
async function uploadImageToSupabase(file: File): Promise<string> {
  // Validar archivo
  if (!file.type.startsWith('image/')) {
    throw new Error('Solo se permiten archivos de imagen');
  }

  if (file.size > 5 * 1024 * 1024) {
    throw new Error('El archivo debe ser menor a 5MB');
  }

  // Generar nombre √∫nico
  const fileExt = file.name.split('.').pop();
  const fileName = `diagram_${Date.now()}_${Math.random().toString(36).substring(2)}.${fileExt}`;

  console.log(`üì§ Subiendo imagen: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`);

  // Subir archivo
  const { error } = await supabase.storage.from('imagenes').upload(fileName, file);

  if (error) {
    throw new Error(`Error al subir imagen: ${error.message}`);
  }

  // Obtener URL p√∫blica
  const { data: urlData } = supabase.storage.from('imagenes').getPublicUrl(fileName);

  console.log(`‚úÖ Imagen subida exitosamente: ${urlData.publicUrl}`);
  return urlData.publicUrl;
}

/**
 * Analiza una imagen usando OpenAI Vision API
 */
async function analyzeImageWithOpenAI(imageUrl: string): Promise<OpenAIResponse> {
  const prompt = `Analiza este diagrama de clases UML y extrae √öNICAMENTE la estructura en formato JSON v√°lido.

RESPONDE SOLO CON EL JSON, sin explicaciones adicionales.

INSTRUCCIONES CR√çTICAS PARA RELACIONES M:N:
- EXAMINA CUIDADOSAMENTE TODAS LAS L√çNEAS del diagrama
- DETECTA TODAS las relaciones, especialmente relaciones muchos-a-muchos (M:N)
- IDENTIFICA tablas intermedias/asociativas que conectan entidades principales
- NO incluyas atributos "id" en las clases, se asumen impl√≠citamente
- Para multiplicidades usa formato exacto: "1", "*", "0..*", "1..*"

‚ö†Ô∏è AN√ÅLISIS OBLIGATORIO DE CADA TABLA INTERMEDIA:
Para CADA entidad que empiece con "Detalle" (DetalleVenta, DetalleCompra, etc.):
1. BUSCA TODAS las l√≠neas que conectan con esa entidad
2. VERIFICA que tenga conexiones a EXACTAMENTE 2 entidades principales
3. SI ves solo 1 conexi√≥n, BUSCA M√ÅS CUIDADOSAMENTE la segunda l√≠nea
4. EJEMPLO: DetalleCompra debe conectar con Compra Y con Producto

AN√ÅLISIS SISTEM√ÅTICO REQUERIDO:
1. IDENTIFICA todas las clases/entidades en el diagrama
2. DETECTA qu√© entidades son principales vs intermedias/asociativas
3. ENCUENTRA todas las l√≠neas que conectan clases (no omitas ninguna l√≠nea, por peque√±a que sea)
4. DETERMINA multiplicidades de cada relaci√≥n con precisi√≥n
5. CLASIFICA cada relaci√≥n seg√∫n su tipo UML
6. VERIFICA que cada l√≠nea visible se convierta en una relaci√≥n en el JSON

‚ö†Ô∏è INSTRUCCI√ìN CR√çTICA: EXAMINA CADA L√çNEA DEL DIAGRAMA
- Busca l√≠neas s√≥lidas que conecten cajas de entidades
- Incluye l√≠neas cortas, largas, horizontales, verticales, diagonales
- No omitas l√≠neas que parezcan menos prominentes visualmente
- Cada l√≠nea visible debe resultar en una relaci√≥n en el JSON
- Si ves una caja conectada a otra caja, debe existir una relaci√≥n

DETECCI√ìN ESPECIAL DE RELACIONES M:N:
Las relaciones muchos-a-muchos se pueden representar de 2 formas:
A) L√çNEA DIRECTA con multiplicidad * en ambos lados
B) V√çA TABLA INTERMEDIA: EntidadA ‚Üí TablaIntermedia ‚Üê EntidadB

REGLA CR√çTICA PARA TABLAS INTERMEDIAS:
- Si ves una entidad con nombre como "Detalle[Algo]", "Intermedia", etc.
- Esa entidad debe estar conectada a EXACTAMENTE 2 entidades principales
- CADA conexi√≥n debe tener multiplicidad * (muchos)
- EJEMPLO: DetalleVenta debe conectar con Venta Y con Producto
- EJEMPLO: DetalleCompra debe conectar con Compra Y con Producto

PARA CADA TABLA INTERMEDIA DETECTADA, crear 2 relaciones:
- EntidadPrincipal1 ‚Üí TablaIntermedia (multiplicidad 1..*)
- EntidadPrincipal2 ‚Üí TablaIntermedia (multiplicidad 1..*)
- NO crear relaci√≥n directa entre EntidadPrincipal1 y EntidadPrincipal2

NOMBRES T√çPICOS DE TABLAS INTERMEDIAS:
- Detalle + NombreEntidad: "DetalleVenta", "DetalleCompra", "DetallePedido"
- Nombres compuestos: "EstudianteCurso", "UsuarioRol", "ProductoCategoria"
- Palabras clave: "intermedia", "relacion", "inscripcion", "asociacion"

CRITERIOS DE CLASIFICACI√ìN:
- ENTIDAD PRINCIPAL: Tiene atributos de negocio significativos, puede existir independientemente
- TABLA INTERMEDIA: Principalmente contiene claves for√°neas + algunos atributos adicionales

PATRONES DE RELACIONES Y DETECCI√ìN VISUAL:

‚ö†Ô∏è CRUCIAL: IDENTIFICAR TIPO DE RELACI√ìN POR ELEMENTOS VISUALES:

1. **ASOCIACI√ìN** (type: "association"):
   - L√≠nea simple/recta entre entidades
   - Sin s√≠mbolos especiales en los extremos
   - Puede tener multiplicidad (1, *, 1..*, 0..*)
   - Es el tipo M√ÅS COM√öN en diagramas de clases

2. **HERENCIA/GENERALIZACI√ìN** (type: "inheritance"):
   - L√≠nea con FLECHA CON TRI√ÅNGULO VAC√çO (hueco) ‚ñ∫
   - El tri√°ngulo apunta hacia la clase padre/superclase
   - Representa relaci√≥n "es-un" (is-a)
   - Ejemplos: Persona ‚Üê Empleado, Vehiculo ‚Üê Auto

3. **COMPOSICI√ìN** (type: "composition"):
   - L√≠nea con ROMBO NEGRO/RELLENO ‚ô¶ en un extremo
   - Relaci√≥n "parte-de" FUERTE (si se elimina el todo, se eliminan las partes)
   - El rombo est√° en la clase "contenedora" 
   - Ejemplos: Casa ‚ô¶‚îÄ Habitaci√≥n, Auto ‚ô¶‚îÄ Motor

4. **AGREGACI√ìN** (type: "aggregation"):
   - L√≠nea con ROMBO BLANCO/VAC√çO ‚óä en un extremo
   - Relaci√≥n "parte-de" D√âBIL (las partes pueden existir independientemente)
   - El rombo est√° en la clase "contenedora"
   - Ejemplos: Universidad ‚óä‚îÄ Estudiante, Equipo ‚óä‚îÄ Jugador

INSTRUCCIONES CR√çTICAS PARA DETECCI√ìN:
- EXAMINA CUIDADOSAMENTE los extremos de cada l√≠nea
- BUSCA s√≠mbolos espec√≠ficos: tri√°ngulos (‚ñ∫), rombos rellenos (‚ô¶), rombos vac√≠os (‚óä)
- Si NO VES ning√∫n s√≠mbolo especial ‚Üí type: "association"
- Si VES tri√°ngulo vac√≠o/hueco ‚Üí type: "inheritance" 
- Si VES rombo negro/relleno ‚Üí type: "composition"
- Si VES rombo blanco/vac√≠o ‚Üí type: "aggregation"

EJEMPLOS VISUALES A BUSCAR:
- ASOCIACI√ìN: ClaseA ------ ClaseB (l√≠nea simple)
- HERENCIA: ClasePadre <---- ClaseHija (tri√°ngulo vac√≠o)
- COMPOSICI√ìN: Todo [rombo relleno]------ Parte  
- AGREGACI√ìN: Contenedor [rombo vac√≠o]------ Elemento

REGLAS DE MAPEO:
- L√≠nea simple sin s√≠mbolos = "association"
- Flecha con tri√°ngulo = "inheritance" 
- Rombo negro/relleno = "composition"
- Rombo blanco/vac√≠o = "aggregation"
- En caso de duda = "association" (m√°s seguro)

REGLAS CR√çTICAS PARA RELACIONES Y DIRECCIONALIDAD:
- NUNCA crear relaciones bidireccionales duplicadas (A‚ÜíB y B‚ÜíA)
- Cada l√≠nea del diagrama = UNA relaci√≥n en el JSON
- Para relaciones M:N intermedias: crear solo A‚ÜíIntermedia y B‚ÜíIntermedia (NO Intermedia‚ÜíA ni Intermedia‚ÜíB)
- Direccionalidad: seguir la l√≥gica sem√°ntica universal:

PATRONES UNIVERSALES DE DIRECCIONALIDAD:
1. CLASIFICACI√ìN: Clasificador ‚Üí Clasificado
   * Ejemplos: Categor√≠a ‚Üí Producto, Tipo ‚Üí Item, Clase ‚Üí Elemento
   
2. AGREGACI√ìN: Contenedor ‚Üí Contenido  
   * Ejemplos: Pedido ‚Üí Detalle, Factura ‚Üí Item, Proyecto ‚Üí Tarea
   
3. JERARQU√çA: Superior ‚Üí Subordinado
   * Ejemplos: Empresa ‚Üí Empleado, Departamento ‚Üí Usuario
   
4. TEMPORALIDAD: Actor ‚Üí Acci√≥n
   * Ejemplos: Cliente ‚Üí Venta, Usuario ‚Üí Operaci√≥n, Proveedor ‚Üí Suministro
   
5. COMPOSICI√ìN: Principal ‚Üí Parte
   * Ejemplos: Documento ‚Üí Secci√≥n, Sistema ‚Üí M√≥dulo

CORRECCIONES SEM√ÅNTICAS UNIVERSALES:
- Entidad clasificadora (categor√≠a, tipo, clase) ‚Üí Entidad clasificada
- Entidad principal ‚Üí Entidad de detalle (que empiece con "Detalle")  
- Actor (persona, usuario, cliente) ‚Üí Acci√≥n (venta, compra, operaci√≥n)
- Contenedor (pedido, factura, documento) ‚Üí Contenido (item, producto, secci√≥n)
- Las multiplicidades deben reflejar la l√≥gica del dominio

VERIFICACI√ìN OBLIGATORIA DE TIPOS DE RELACI√ìN:
- ¬øExaminaste los EXTREMOS de cada l√≠nea buscando s√≠mbolos?
- ¬øDetectaste tri√°ngulos vac√≠os para herencia?
- ¬øIdentificaste rombos rellenos para composici√≥n?
- ¬øEncontraste rombos vac√≠os para agregaci√≥n?
- ¬øClasificaste correctamente cada tipo de relaci√≥n?
- ¬øUsaste "association" solo para l√≠neas simples sin s√≠mbolos?

VERIFICACI√ìN OBLIGATORIA M:N:
- ¬øDetectaste todas las l√≠neas con multiplicidad *?
- ¬øIdentificaste correctamente las tablas intermedias?
- ¬øLas tablas intermedias conectan exactamente 2 entidades principales?
- ¬øEvitaste duplicar relaciones en ambas direcciones?
- ‚ö†Ô∏è ¬øCADA tabla "Detalle*" o intermedia tiene EXACTAMENTE 2 conexiones?
- ¬øLas direcciones de relaciones siguen patrones sem√°nticos universales?
- ¬øLas multiplicidades son l√≥gicamente consistentes?

PATRONES UNIVERSALES DE VERIFICACI√ìN:
- Clasificador ‚Üí Clasificado (Ej: Categor√≠a ‚Üí Item, Tipo ‚Üí Elemento)
- Contenedor ‚Üí Contenido (Ej: Orden ‚Üí Detalle, Documento ‚Üí Secci√≥n)  
- Actor ‚Üí Acci√≥n (Ej: Usuario ‚Üí Operaci√≥n, Agente ‚Üí Transacci√≥n)
- Principal ‚Üí Subordinado (Ej: Empresa ‚Üí Empleado, Sistema ‚Üí M√≥dulo)
- Temporal ‚Üí Entidad (Ej: Per√≠odo ‚Üí Evento, Fecha ‚Üí Registro)

Formato requerido:
{
  "classes": [
    {
      "name": "NombreClase",
      "attributes": [
        {"name": "atributo", "type": "String", "visibility": "private"},
        {"name": "otroAtributo", "type": "Integer", "visibility": "public"}
      ],
      "methods": []
    }
  ],
  "relationships": [
    {
      "type": "association",
      "source": "ClaseOrigen",
      "target": "ClaseDestino", 
      "multiplicity": "1..*"
    }
  ]
}

Reglas universales:
- Visibilidad de atributos: Detectar desde el diagrama:
  * "-" = "private" (por defecto si no hay s√≠mbolo)
  * "+" = "public" 
  * "#" = "protected"
- Tipos: "String", "Integer", "Float", "Date", "Boolean" seg√∫n corresponda
- NO incluir atributos "id" - se asumen impl√≠citamente
- Para relaciones directas: crear una relaci√≥n "association" con multiplicidad apropiada
- Para relaciones M:N: crear relaciones separadas desde cada entidad principal hacia la tabla intermedia
- ¬°IMPORTANTE!: Una l√≠nea = una relaci√≥n, evitar duplicados bidireccionales
- ‚ö†Ô∏è CR√çTICO: Verificar que cada "Detalle*" tenga 2 conexiones
- Analizar cuidadosamente las l√≠neas y multiplicidades visibles en el diagrama`;

  const headers = {
    'Content-Type': 'application/json',
    Authorization: `Bearer ${OPENAI_TOKEN}`,
  };

  const payload = {
    model: 'gpt-4o-mini', // Modelo m√°s econ√≥mico
    messages: [
      {
        role: 'user',
        content: [
          {
            type: 'text',
            text: prompt,
          },
          {
            type: 'image_url',
            image_url: {
              url: imageUrl,
              detail: 'high',
            },
          },
        ],
      },
    ],
    max_tokens: 2000,
    temperature: 0.1,
  };

  console.log('ü§ñ Analizando imagen con OpenAI Vision...');

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: headers,
    body: JSON.stringify(payload),
  });

  if (!response.ok) {
    const errorData = await response
      .json()
      .catch(() => ({ error: { message: 'Error desconocido' } }));
    throw new Error(`Error OpenAI: ${errorData.error?.message || response.statusText}`);
  }

  const result = await response.json();

  // Extraer informaci√≥n de uso
  const usage = result.usage || {};
  const cost =
    ((usage.prompt_tokens || 0) * 0.00015 + (usage.completion_tokens || 0) * 0.0006) / 1000;

  console.log(`‚úÖ An√°lisis completado`);
  console.log(`üí∞ Costo estimado: $${cost.toFixed(6)} USD`);
  console.log(`üî¢ Tokens usados: ${usage.total_tokens || 0}`);

  // Parsear respuesta
  let content = result.choices[0]?.message?.content || '';

  // Limpiar markdown si existe
  if (content.startsWith('```json')) {
    content = content.replace('```json', '').replace('```', '').trim();
  } else if (content.startsWith('```')) {
    content = content.replace('```', '').strip();
  }

  try {
    const parsedData = JSON.parse(content);

    // üîç LOGGING DETALLADO PARA DEBUGGING
    console.log('üìä === RESPUESTA COMPLETA DE OPENAI ===');
    console.log('üèõÔ∏è Clases detectadas:');
    parsedData.classes?.forEach((cls: any, index: number) => {
      console.log(`  ${index + 1}. ${cls.name}`);
      console.log(
        `     Atributos: [${cls.attributes?.map((a: any) => `${a.name}:${a.type}(${a.visibility || 'sin-scope'})`).join(', ') || 'ninguno'}]`
      );
    });

    console.log('üîó Relaciones detectadas:');
    parsedData.relationships?.forEach((rel: any, index: number) => {
      console.log(`  ${index + 1}. ${rel.source} ‚Üí ${rel.target}`);
      console.log(`     Tipo: ${rel.type}, Multiplicidad: ${rel.multiplicity}`);
    });

    // AN√ÅLISIS DE TIPOS DE RELACI√ìN
    console.log('üîç AN√ÅLISIS DE TIPOS DE RELACI√ìN:');
    const relationshipTypes = new Map<string, number>();
    parsedData.relationships?.forEach((rel: any) => {
      const type = rel.type || 'undefined';
      relationshipTypes.set(type, (relationshipTypes.get(type) || 0) + 1);
    });

    console.log('üìä Distribuci√≥n de tipos de relaci√≥n:');
    for (const [type, count] of relationshipTypes.entries()) {
      console.log(`  - ${type}: ${count} relaciones`);
    }

    if (relationshipTypes.size === 1 && relationshipTypes.has('association')) {
      console.log(`  ‚ö†Ô∏è ADVERTENCIA: Solo se detectaron relaciones de asociaci√≥n.`);
      console.log(
        `     Si el diagrama tiene herencia/composici√≥n/agregaci√≥n, revisar detecci√≥n visual.`
      );
    }

    // An√°lisis general de relaciones
    console.log('üîç AN√ÅLISIS GENERAL DE RELACIONES:');
    console.log(`  Total relaciones detectadas: ${parsedData.relationships?.length || 0}`);
    console.log(`  Total clases detectadas: ${parsedData.classes?.length || 0}`);

    // Verificar patrones M:N universales
    const tablesWithDetalle =
      parsedData.classes?.filter(
        (cls: any) =>
          cls.name.toLowerCase().includes('detalle') ||
          cls.name.toLowerCase().includes('intermedia') ||
          cls.name.toLowerCase().includes('inscripcion')
      ) || [];
    console.log(
      `  Posibles tablas intermedias: ${tablesWithDetalle.map((t: any) => t.name).join(', ') || 'ninguna'}`
    );

    // Verificar conectividad general
    const allClassNames = parsedData.classes?.map((cls: any) => cls.name) || [];
    const connectedClasses = new Set<string>();
    parsedData.relationships?.forEach((rel: any) => {
      connectedClasses.add(rel.source);
      connectedClasses.add(rel.target);
    });
    const unconnectedClasses = allClassNames.filter((name: string) => !connectedClasses.has(name));
    if (unconnectedClasses.length > 0) {
      console.log(`  ‚ö†Ô∏è Clases sin conexiones: ${unconnectedClasses.join(', ')}`);
    }

    // VERIFICACI√ìN ESPEC√çFICA: Comprobar relaciones esperadas comunes
    const expectedCommonRelations = [
      { actor: 'Cliente', action: 'Venta' },
      { actor: 'Proveedor', action: 'Compra' },
      { classifier: 'Categoria', classified: 'Producto' },
    ];

    expectedCommonRelations.forEach(expected => {
      const hasRelation = parsedData.relationships?.some(
        (rel: any) =>
          (rel.source === expected.actor && rel.target === expected.action) ||
          (rel.source === expected.classifier && rel.target === expected.classified) ||
          (rel.source === expected.action && rel.target === expected.actor) ||
          (rel.source === expected.classified && rel.target === expected.classifier)
      );

      const hasActor = allClassNames.includes(expected.actor || expected.classifier || '');
      const hasAction = allClassNames.includes(expected.action || expected.classified || '');

      if (hasActor && hasAction && !hasRelation) {
        console.log(
          `  üö® RELACI√ìN FALTANTE DETECTADA: ${expected.actor || expected.classifier} ‚Üî ${expected.action || expected.classified}`
        );
      }
    });

    console.log('üìÑ JSON completo:', JSON.stringify(parsedData, null, 2));
    console.log('============================================');

    return parsedData;
  } catch (error) {
    console.error('‚ùå Error parseando JSON:', error);
    console.error('üìÑ Respuesta recibida:', content);
    throw new Error('La respuesta de OpenAI no es un JSON v√°lido');
  }
}

/**
 * Funci√≥n principal: importa una imagen, la analiza y retorna nodos/edges
 */
export async function importDiagramFromImage(
  file: File,
  onProgress?: (stage: string) => void
): Promise<AnalysisResult> {
  try {
    // Fase 1: Subir imagen
    onProgress?.('Subiendo imagen a Supabase...');
    const imageUrl = await uploadImageToSupabase(file);

    // Fase 2: Analizar con OpenAI
    onProgress?.('Analizando diagrama con OpenAI...');
    const openaiResponse = await analyzeImageWithOpenAI(imageUrl);

    // Fase 3: Convertir a formato UML
    onProgress?.('Convirtiendo a formato UML...');
    const { nodes, edges } = convertOpenAIToUMLConstants(openaiResponse);

    console.log(`üìä Importaci√≥n exitosa: ${nodes.length} clases, ${edges.length} relaciones`);

    return {
      success: true,
      nodes,
      edges,
    };
  } catch (error) {
    console.error('‚ùå Error en importaci√≥n:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Error desconocido',
    };
  }
}

/**
 * Valida que se tenga un token de OpenAI configurado (legacy, ya no se usa)
 */
export function validateOpenAIToken(token: string): boolean {
  return !!(token && token.startsWith('sk-') && token.length > 20);
}
